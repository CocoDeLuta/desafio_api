@page "/criar-conta"
@inject ApiService ApiService
@inject MessageService MessageService

<!-- Página para criação de uma nova conta -->

<h3>Criar Conta</h3>

<div class="card p-3" style="max-width: 640px;">
    <SearchWithSuggestions TItem="PessoaDto" 
                          @bind-SearchText="buscaPessoa" 
                          @bind-SelectedItem="pessoaSelecionada" 
                          Items="todasPessoas" 
                          Label="Pessoa"
                          Placeholder="Digite o nome para buscar"
                          Id="pessoaBusca"
                          GetDisplayText="@(p => $"{p.Nome} ({p.Cpf})")"
                          GetSearchText="@(p => p.Nome)" />

    <MonetaryInput @bind-Value="limiteTexto" 
                   Label="Limite de saque diário" 
                   Placeholder="Ex.: 100,50" 
                   HelpText="Informe em reais com duas casas (ex.: 100,50)." 
                   Id="limite" />

    <div class="mb-3">
        <label class="form-label" for="tipo">Tipo da conta</label>
        <select id="tipo" class="form-control" @bind="tipoSelecionado">
            @foreach (var t in tiposConta)
            {
                <option value="@t">@t</option>
            }
        </select>
    </div>

    <div class="d-flex gap-2">
        <button class="btn btn-primary" @onclick="Criar" disabled="@(isSubmitting)">Criar Conta</button>
        <button class="btn btn-secondary" @onclick="Limpar" disabled="@(isSubmitting)">Limpar</button>
    </div>

    <MessageAlert Message="@MessageService.Message" MessageClass="@MessageService.MessageClass" />
</div>

@code {
    // Estado local e listas auxiliares
    private List<PessoaDto> todasPessoas = new();
    private string buscaPessoa = string.Empty;
    private PessoaDto? pessoaSelecionada;
    private decimal limiteSaqueDiario;
    private string limiteTexto = string.Empty;
    private string[] tiposConta = new[] { "Corrente", "Poupanca", "Salario" };
    private string tipoSelecionado = "Corrente";
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        await CarregarPessoas();
        MessageService.OnMessageChanged += StateHasChanged;
    }

    private async Task CarregarPessoas()
    {
        try
        {
            var pessoas = await ApiService.GetAsync<List<PessoaDto>>("/api/Pessoa/ObterTodasPessoas");
            todasPessoas = pessoas ?? new List<PessoaDto>();
        }
        catch (Exception ex)
        {
            MessageService.ShowError($"Erro ao carregar pessoas: {ex.Message}");
        }
    }


    // Limpa o formulário
    private void Limpar()
    {
        pessoaSelecionada = null;
        buscaPessoa = string.Empty;
        limiteSaqueDiario = 0m;
        limiteTexto = string.Empty;
        tipoSelecionado = tiposConta[0];
        MessageService.Clear();
    }

    // Regras básicas de validação
    private bool Validar()
    {
        if (pessoaSelecionada is null)
        {
            MessageService.ShowError("Selecione uma pessoa.");
            return false;
        }
        if (!ValidationService.TryParseMonetario(limiteTexto, out limiteSaqueDiario))
        {
            MessageService.ShowError("Informe um limite válido com até duas casas decimais.");
            return false;
        }
        if (limiteSaqueDiario < 0)
        {
            MessageService.ShowError("O limite de saque deve ser zero ou positivo.");
            return false;
        }
        if (!tiposConta.Contains(tipoSelecionado))
        {
            MessageService.ShowError("Tipo de conta inválido.");
            return false;
        }
        return true;
    }

    // Envia criação da conta para a API
    private async Task Criar()
    {
        if (isSubmitting) return;
        if (!Validar()) return;

        try
        {
            isSubmitting = true;

            var payload = new
            {
                pessoa = new {
                    idPessoa = pessoaSelecionada!.IdPessoa,
                    nome = pessoaSelecionada!.Nome,
                    cpf = pessoaSelecionada!.Cpf,
                    dataNascimento = pessoaSelecionada!.DataNascimento?.ToString("O")
                },
                limiteSaqueDiario = limiteSaqueDiario,
                tipoConta = tipoSelecionado,
                ativo = true,
                dataCriacao = DateTime.Now.ToString("O")
            };

            var response = await ApiService.PostAsync("/api/Conta/InserirConta", payload);

            if (response.IsSuccessStatusCode)
            {
                MessageService.ShowSuccess("Conta criada com sucesso!");
                Limpar();
            }
            else
            {
                var errorMessage = await ApiService.GetErrorMessageAsync(response);
                MessageService.ShowError(errorMessage);
            }
        }
        catch (Exception ex)
        {
            MessageService.ShowError($"Erro: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

}


