@page "/consultas"

<PageTitle>Consultas</PageTitle>

<link href="Consultas.css" rel="stylesheet" />

<div class="consultas-container">
    <div class="header">
        <h1>Consultas do Sistema</h1>
        <p>Selecione o tipo de dados que deseja consultar</p>
    </div>

    <div class="controls">
        <div class="form-group">
            <label for="opcao">Tipo de Consulta:</label>
            <select id="opcao" class="form-control" @bind="opcaoSelecionada">
                <option value="contas">Contas</option>
                <option value="transacoes">Transações</option>
                <option value="pessoas">Pessoas</option>
            </select>
        </div>
        
        <button class="btn-primary" @onclick="BuscarDados">
            Buscar Dados
        </button>
    </div>

    @if (dados != null && dados.Count > 0)
    {
        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>
                        @foreach (var col in colunas)
                        {
                            <th>@col</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in dados)
                    {
                        <tr>
                            @foreach (var col in colunas)
                            {
                                                                 <td>
                                     @{
                                         var valor = item.ContainsKey(col) ? item[col] : "";
                                         if (col == "ativo")
                                         {
                                             <span class="@(valor.ToString() == "True" ? "status-active" : "status-inactive")">
                                                 @(valor.ToString() == "True" ? "Ativo" : "Inativo")
                                             </span>
                                         }
                                         else
                                         {
                                             @valor
                                         }
                                     }
                                 </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else if (dados != null)
    {
        <div class="alert alert-info">
            <p>Nenhum dado encontrado.</p>
        </div>
    }
</div>

@code {
    private string opcaoSelecionada = "contas";
    private List<Dictionary<string, object>>? dados = null;
    private List<string> colunas = new();

    // Classes para deserialização
    public class PessoaApiModel
    {
        public int IdPessoa { get; set; }
        public string Nome { get; set; } = string.Empty;
        public string Cpf { get; set; } = string.Empty;
        public DateTime DataNascimento { get; set; }
    }

    public class ContaApiModel
    {
        public int IdConta { get; set; }
        public PessoaApiModel Pessoa { get; set; } = new();
        public decimal Saldo { get; set; }
        public decimal LimiteSaqueDiario { get; set; }
        public bool Ativo { get; set; }
        public string TipoConta { get; set; } = string.Empty;
        public DateTime DataCriacao { get; set; }
    }

    public class TransacaoApiModel
    {
        public int IdTransacao { get; set; }
        public ContaApiModel Conta { get; set; } = new();
        public decimal Valor { get; set; }
        public string TipoTransacao { get; set; } = string.Empty;
        public DateTime DataTransacao { get; set; }
    }

    private async Task BuscarDados()
    {
        string url = "";

        switch (opcaoSelecionada)
        {
            case "contas":
                url = "http://localhost:5049/api/Conta/ObterTodasContas";
                break;
            case "transacoes":
                url = "http://localhost:5049/api/Transacao/ObterTodasTransacoes";
                break;
            case "pessoas":
                url = "http://localhost:5049/api/Pessoa/ObterTodasPessoas";
                break;
            default:
                url = "http://localhost:5049/api/Conta/ObterTodasContas";
                break;
        }

        using var http = new HttpClient();
        var response = await http.GetAsync(url);

        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            var resultado = System.Text.Json.JsonSerializer.Deserialize<List<Dictionary<string, object>>>(json);
            dados = resultado ?? new List<Dictionary<string, object>>();

            colunas = (dados.Count > 0) ? dados[0].Keys.ToList() : new List<string>();

            if (opcaoSelecionada == "contas" && dados.Count > 0)
            {
                foreach (var item in dados)
                {
                    if (item.ContainsKey("pessoa") && item["pessoa"] is not null)
                    {
                        try
                        {
                            var pessoaElement = (System.Text.Json.JsonElement)item["pessoa"];
                            if (pessoaElement.TryGetProperty("nome", out var nomeElement))
                            {
                                item["pessoa"] = nomeElement.GetString() ?? "Nome não encontrado";
                            }
                            else
                            {
                                item["pessoa"] = "Nome não encontrado";
                            }
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Erro ao processar Pessoa: {ex.Message}");
                            item["pessoa"] = "Erro ao processar";
                        }
                    }
                    
                    // Formatar saldo e limite
                    if (item.ContainsKey("saldo"))
                    {
                        if (decimal.TryParse(item["saldo"].ToString(), out var saldo))
                        {
                            item["saldo"] = saldo.ToString("C", new System.Globalization.CultureInfo("pt-BR"));
                        }
                    }
                    
                    if (item.ContainsKey("limiteSaqueDiario"))
                    {
                        if (decimal.TryParse(item["limiteSaqueDiario"].ToString(), out var limite))
                        {
                            item["limiteSaqueDiario"] = limite.ToString("C", new System.Globalization.CultureInfo("pt-BR"));
                        }
                    }
                    
                    // Formatar data de criação
                    if (item.ContainsKey("dataCriacao"))
                    {
                        if (DateTime.TryParse(item["dataCriacao"].ToString(), out var data))
                        {
                            item["dataCriacao"] = data.ToString("dd/MM/yyyy");
                        }
                    }
                }
            }
            else if (opcaoSelecionada == "transacoes" && dados.Count > 0)
            {
                foreach (var item in dados)
                {
                    if (item.ContainsKey("conta") && item["conta"] is not null)
                    {
                        try
                        {
                            var contaElement = (System.Text.Json.JsonElement)item["conta"];
                            if (contaElement.TryGetProperty("idConta", out var idContaElement))
                            {
                                item["conta"] = idContaElement.GetInt32().ToString();
                            }
                            else
                            {
                                item["conta"] = "ID não encontrado";
                            }
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Erro ao processar Conta: {ex.Message}");
                            item["conta"] = "Erro ao processar";
                        }
                    }
                    
                    // Formatar valor
                    if (item.ContainsKey("valor"))
                    {
                        if (decimal.TryParse(item["valor"].ToString(), out var valor))
                        {
                            item["valor"] = valor.ToString("C", new System.Globalization.CultureInfo("pt-BR"));
                        }
                    }
                    
                    // Formatar data da transação
                    if (item.ContainsKey("dataTransacao"))
                    {
                        if (DateTime.TryParse(item["dataTransacao"].ToString(), out var data))
                        {
                            item["dataTransacao"] = data.ToString("dd/MM/yyyy HH:mm");
                        }
                    }
                }
            }
            else if (opcaoSelecionada == "pessoas" && dados.Count > 0)
            {
                foreach (var item in dados)
                {
                    // Formatar data de nascimento
                    if (item.ContainsKey("dataNascimento"))
                    {
                        if (DateTime.TryParse(item["dataNascimento"].ToString(), out var data))
                        {
                            item["dataNascimento"] = data.ToString("dd/MM/yyyy");
                        }
                    }
                }
            }
        }
        else
        {
            dados = new List<Dictionary<string, object>>();
            colunas = new List<string>();
        }
    }

    private List<Dictionary<string, object>> ConverterContasParaDicionario(List<ContaApiModel>? contas)
    {
        var resultado = new List<Dictionary<string, object>>();
        
        if (contas == null) return resultado;

        foreach (var conta in contas)
        {
            var dict = new Dictionary<string, object>
            {
                ["IdConta"] = conta.IdConta,
                ["Pessoa"] = conta.Pessoa?.Nome ?? "Nome não encontrado",
                ["Saldo"] = conta.Saldo,
                ["LimiteSaqueDiario"] = conta.LimiteSaqueDiario,
                ["Ativo"] = conta.Ativo,
                ["TipoConta"] = conta.TipoConta,
                ["DataCriacao"] = conta.DataCriacao.ToString("dd/MM/yyyy")
            };
            resultado.Add(dict);
        }

        return resultado;
    }

    private List<Dictionary<string, object>> ConverterTransacoesParaDicionario(List<TransacaoApiModel>? transacoes)
    {
        var resultado = new List<Dictionary<string, object>>();
        
        if (transacoes == null) return resultado;

        foreach (var transacao in transacoes)
        {
            var dict = new Dictionary<string, object>
            {
                ["IdTransacao"] = transacao.IdTransacao,
                ["Conta"] = transacao.Conta?.IdConta.ToString() ?? "Conta não encontrada",
                ["Valor"] = transacao.Valor,
                ["TipoTransacao"] = transacao.TipoTransacao,
                ["DataTransacao"] = transacao.DataTransacao.ToString("dd/MM/yyyy HH:mm")
            };
            resultado.Add(dict);
        }

        return resultado;
    }

    private List<Dictionary<string, object>> ConverterPessoasParaDicionario(List<PessoaApiModel>? pessoas)
    {
        var resultado = new List<Dictionary<string, object>>();
        
        if (pessoas == null) return resultado;

        foreach (var pessoa in pessoas)
        {
            var dict = new Dictionary<string, object>
            {
                ["IdPessoa"] = pessoa.IdPessoa,
                ["Nome"] = pessoa.Nome,
                ["Cpf"] = pessoa.Cpf,
                ["DataNascimento"] = pessoa.DataNascimento.ToString("dd/MM/yyyy")
            };
            resultado.Add(dict);
        }

        return resultado;
    }
}



