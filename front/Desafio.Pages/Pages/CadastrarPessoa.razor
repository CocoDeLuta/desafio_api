@page "/cadastrar-pessoa"
@inject ApiService ApiService
@inject MessageService MessageService

<!-- Página para cadastrar uma nova pessoa -->

<h3>Cadastrar Pessoa</h3>

<div class="card p-3" style="max-width: 520px;">
    <div class="mb-3">
        <label class="form-label" for="nome">Nome</label>
        <input id="nome" class="form-control" @bind="pessoa.Nome" placeholder="Nome completo" />
    </div>
    
    <CpfInput @bind-Value="pessoa.Cpf" Label="CPF" Placeholder="Somente números" />
    
    <div class="mb-3">
        <label class="form-label" for="dataNasc">Data de Nascimento</label>
        <InputDate id="dataNasc" class="form-control" @bind-Value="pessoa.DataNascimento" TValue="DateTime?" min="1900-01-01" max="@maxDate" />
    </div>

    <div class="d-flex gap-2">
        <button class="btn btn-primary" @onclick="Cadastrar" disabled="@(isSubmitting)">Adicionar</button>
        <button class="btn btn-secondary" @onclick="Limpar" disabled="@(isSubmitting)">Limpar</button>
    </div>

    <MessageAlert Message="@MessageService.Message" MessageClass="@MessageService.MessageClass" />
</div>

@code {
    // Estado local do formulário
    private PessoaDto pessoa = new();
    private bool isSubmitting = false;
    private readonly string maxDate = DateTime.Today.ToString("yyyy-MM-dd");

    protected override void OnInitialized()
    {
        MessageService.OnMessageChanged += StateHasChanged;
    }

    // Limpa o formulário
    private void Limpar()
    {
        pessoa = new PessoaDto();
        MessageService.Clear();
    }

    // Regras básicas de validação (nome/CPF/data)
    private bool Validar()
    {
        if (!ValidationService.ValidateRequired(pessoa.Nome)) 
        { 
            MessageService.ShowError("Informe o nome."); 
            return false; 
        }
        
        pessoa.Cpf = ValidationService.SanitizeCpf(pessoa.Cpf);
        if (!ValidationService.ValidateRequired(pessoa.Cpf)) 
        { 
            MessageService.ShowError("Informe o CPF."); 
            return false; 
        }
        
        if (!ValidationService.ValidateCpf(pessoa.Cpf)) 
        { 
            MessageService.ShowError("CPF inválido. Deve conter 11 dígitos."); 
            return false; 
        }
        
        if (!pessoa.DataNascimento.HasValue) 
        { 
            MessageService.ShowError("Informe a data de nascimento."); 
            return false; 
        }
        
        if (!ValidationService.ValidateDateRange(pessoa.DataNascimento, new DateTime(1900, 1, 1), DateTime.Today))
        {
            MessageService.ShowError("Data de nascimento fora do intervalo válido.");
            return false;
        }
        return true;
    }

    // Envia o cadastro para a API
    private async Task Cadastrar()
    {
        if (isSubmitting) return;
        if (!Validar()) return;

        try
        {
            isSubmitting = true;

            var payload = new
            {
                idPessoa = pessoa.IdPessoa,
                nome = pessoa.Nome,
                cpf = pessoa.Cpf,
                dataNascimento = pessoa.DataNascimento?.ToString("O")
            };

            var response = await ApiService.PostAsync("/api/Pessoa/AdicionarPessoa", payload);

            if (response.IsSuccessStatusCode)
            {
                MessageService.ShowSuccess("Pessoa cadastrada com sucesso!");
                Limpar();
            }
            else
            {
                var errorMessage = await ApiService.GetErrorMessageAsync(response);
                MessageService.ShowError(errorMessage);
            }
        }
        catch (Exception ex)
        {
            MessageService.ShowError($"Erro: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

}


