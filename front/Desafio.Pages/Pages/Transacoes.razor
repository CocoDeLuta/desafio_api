@page "/transacoes"
@inject ApiService ApiService
@inject MessageService MessageService

<!-- Página para operações de transações: Depósito, Saque e Transferência -->

<h3>Transações</h3>

<div class="card p-3" style="max-width: 720px;">
    <div class="mb-3">
        <label class="form-label" for="tipo">Tipo de Transação</label>
        <select id="tipo" class="form-control" @bind="tipoSelecionado" @bind:after="OnTipoChanged">
            @foreach (var t in tipos)
            {
                <option value="@t">@t</option>
            }
        </select>
    </div>

    <SearchWithSuggestions TItem="ContaDto" 
                          @bind-SearchText="buscaOrigem" 
                          @bind-SelectedItem="contaOrigem" 
                          Items="todasContas" 
                          Label="Conta de Origem (busque pelo nome da pessoa)"
                          Placeholder="Digite o nome"
                          Id="origem"
                          GetDisplayText="@(c => $"Conta {c.IdConta} - {c.Pessoa?.Nome}")"
                          GetSearchText="@(c => c.Pessoa?.Nome ?? "")" />

    @if (tipoSelecionado == "Transferencia")
    {
        <SearchWithSuggestions TItem="ContaDto" 
                              @bind-SearchText="buscaDestino" 
                              @bind-SelectedItem="contaDestino" 
                              Items="todasContas" 
                              Label="Conta de Destino (busque pelo nome da pessoa)"
                              Placeholder="Digite o nome"
                              Id="destino"
                              GetDisplayText="@(c => $"Conta {c.IdConta} - {c.Pessoa?.Nome}")"
                              GetSearchText="@(c => c.Pessoa?.Nome ?? "")" />
    }

    <MonetaryInput @bind-Value="valorStr" 
                   Label="@LabelValor" 
                   Placeholder="Ex.: 1,99" 
                   HelpText="Use vírgula para centavos (ex.: 1,99). Máx. 2 casas." 
                   Id="valor" />

    <div class="d-flex gap-2">
        <button class="btn btn-primary" @onclick="Executar" disabled="@(executando)">Executar</button>
        <button class="btn btn-secondary" @onclick="Limpar" disabled="@(executando)">Limpar</button>
    </div>

    <MessageAlert Message="@MessageService.Message" MessageClass="@MessageService.MessageClass" />
</div>

@code {
    // Opções e estado local da tela
    private string[] tipos = new[] { "Deposito", "Saque", "Transferencia" };
    private string tipoSelecionado = "Deposito";

    private List<ContaDto> todasContas = new();
    private string buscaOrigem = string.Empty;
    private string buscaDestino = string.Empty;
    private ContaDto? contaOrigem;
    private ContaDto? contaDestino;
    private decimal valor;
    private string valorStr = string.Empty;
    private bool executando = false;

    // Carrega contas disponíveis para busca
    protected override async Task OnInitializedAsync()
    {
        await CarregarContas();
        MessageService.OnMessageChanged += StateHasChanged;
    }

    private async Task CarregarContas()
    {
        try
        {
            var contas = await ApiService.GetAsync<List<ContaDto>>("/api/Conta/ObterTodasContas");
            todasContas = contas ?? new List<ContaDto>();
        }
        catch (Exception ex)
        {
            MessageService.ShowError($"Erro ao carregar contas: {ex.Message}");
        }
    }

    // Quando muda o tipo, limpa valores/estado pertinentes
    private void OnTipoChanged()
    {
        valor = 0m;
        valorStr = string.Empty;
        if (tipoSelecionado != "Transferencia")
        {
            contaDestino = null;
            buscaDestino = string.Empty;
        }
    }

    // Executa a transação na API
    private async Task Executar()
    {
        if (executando) return;
        if (!Validar()) return;
        
        try
        {
            executando = true;
            HttpResponseMessage response;
            var valorParam = valor.ToString(System.Globalization.CultureInfo.InvariantCulture);
            
            if (tipoSelecionado == "Deposito")
            {
                response = await ApiService.PostAsync($"/api/Transacao/Deposito/{contaOrigem!.IdConta}/{valorParam}", new { });
            }
            else if (tipoSelecionado == "Saque")
            {
                response = await ApiService.PostAsync($"/api/Transacao/Saque/{contaOrigem!.IdConta}/{valorParam}", new { });
            }
            else // Transferencia
            {
                response = await ApiService.PostAsync($"/api/Transacao/Transferencia/{contaOrigem!.IdConta}/{contaDestino!.IdConta}/{valorParam}", new { });
            }

            if (response.IsSuccessStatusCode)
            {
                MessageService.ShowSuccess("Operação realizada com sucesso!");
                LimparValores();
            }
            else
            {
                var errorMessage = await ApiService.GetErrorMessageAsync(response);
                MessageService.ShowError(errorMessage);
            }
        }
        catch (Exception ex)
        {
            MessageService.ShowError($"Erro: {ex.Message}");
        }
        finally
        {
            executando = false;
        }
    }

    // Limpa formulário
    private void Limpar()
    {
        contaOrigem = null;
        contaDestino = null;
        buscaOrigem = string.Empty;
        buscaDestino = string.Empty;
        LimparValores();
        MessageService.Clear();
    }

    // Limpa apenas campos de valor e destino
    private void LimparValores()
    {
        valor = 0m;
        valorStr = string.Empty;
        if (tipoSelecionado != "Transferencia")
        {
            contaDestino = null;
            buscaDestino = string.Empty;
        }
    }

    // Valida conta(s) e valor digitado
    private bool Validar()
    {
        if (contaOrigem == null)
        {
            MessageService.ShowError("Selecione a conta de origem.");
            return false;
        }
        
        if (!ValidationService.TryParseMonetario(valorStr, out valor))
        {
            MessageService.ShowError("Valor inválido. Ex.: 1,99");
            return false;
        }
        
        if (valor <= 0)
        {
            MessageService.ShowError("Informe um valor maior que zero.");
            return false;
        }
        
        if (tipoSelecionado == "Transferencia")
        {
            if (contaDestino == null)
            {
                MessageService.ShowError("Selecione a conta de destino.");
                return false;
            }
            if (contaDestino.IdConta == contaOrigem.IdConta)
            {
                MessageService.ShowError("A conta de destino deve ser diferente da origem.");
                return false;
            }
            if (contaOrigem.TipoConta == "Salario" && contaOrigem.Pessoa?.IdPessoa != contaDestino.Pessoa?.IdPessoa)
            {
                MessageService.ShowError("Não é possível transferir de conta salário para conta de outro titular.");
                return false;
            }
        }
        return true;
    }

    // Label amigável conforme tipo
    private string LabelValor => tipoSelecionado switch
    {
        "Deposito" => "Valor do Depósito",
        "Saque" => "Valor do Saque",
        _ => "Valor da Transferência"
    };
}


